{"ast":null,"code":"var _jsxFileName = \"C:\\\\Universidad\\\\4Universidad\\\\TFG\\\\TFG-Ejecutor-de-busquedas-del-tesoro\\\\ReactDesdeEjemplo\\\\src\\\\components\\\\formOne\\\\steps\\\\Quiz.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  //Esto es como un using en c++\n  //Donde almacenamos la pregunta\n  const [question, setQuestion] = useState(\"\"); //Array con las posibles respuestas a esa pregunta\n\n  const [answers, setAnswers] = useState([]); //Respuesta en proceso\n\n  const [currAnswer, setCurrAnswer] = useState(\"\");\n  const [sobreEscribir, setSobreEscribir] = useState(false);\n  useEffect(() => {\n    if (props.getState('SobreEscribir', false)) {\n      console.log(\"Es hora de sobreesribir pregunta directamente\");\n      setSobreEscribir(true);\n      console.log(\"El estado es \" + sobreEscribir);\n    }\n\n    if (props.getState('SobreEscribir', false)) {\n      //Indico que ya no es necesario sobreescribir nada\n      props.setState('SobreEscribir', false, false); //Me quedo con lo que haya que sobreescribir\n\n      let estadoACargar = props.getState('DatosASobreEscribir', {\n        pregunta: \"hola\",\n        answers: [{\n          respuesta: \"\",\n          verdad: false\n        }]\n      }); //Me guardo tando la pregunta como las respuestas que había configuradas\n\n      setQuestion(estadoACargar.Pregunta);\n      console.log(estadoACargar);\n      console.log(\"la longitud es \" + estadoACargar.Respuestas.length);\n      let futurasRespuestas = [];\n\n      for (let i = 0; i < estadoACargar.Respuestas.length; i++) {\n        let respuestaActual = estadoACargar.Respuestas[i];\n        console.log(\"Respuesta numero \" + i + \" \" + respuestaActual.text + \" y es \" + respuestaActual.isCorrect);\n        console.log(respuestaActual);\n        futurasRespuestas.push(respuestaActual);\n      }\n\n      setAnswers(futurasRespuestas);\n    }\n\n    console.log(\"Acabo de aparecer en pantalla\"); //Este cógigo se ejecuta EXCLUSIVAMENTE cuando se va a desmontar el componente\n\n    return () => {\n      console.log(\"Quiz se acaba de desmontar\");\n      if (props.getState('SobreEscribir', false)) props.setState('SobreEscribir', false, false);\n    };\n  }, []); //const [quizAddFunction, setFuncion] = useState<Function>(props.funcion);\n\n  const [index, setIndex] = useState(props.order);\n\n  const modifyQuestion = e => {\n    setQuestion(e);\n  };\n\n  const handleNewQuestion = e => {\n    e.preventDefault();\n    addAnswer(currAnswer);\n    setCurrAnswer(\"\");\n  };\n\n  const addAnswer = text => {\n    console.log(\"Respuesta añadida\");\n    setAnswers([...answers, {\n      text,\n      isCorrect: false\n    }]);\n  };\n\n  const removeAnswer = index => {\n    const newAnswers = [...answers];\n    newAnswers.splice(index, 1);\n    setAnswers(newAnswers);\n  };\n\n  const setAnswerAsCorrect = index => {\n    const newAnswers = [...answers];\n    newAnswers[index].isCorrect = !newAnswers[index].isCorrect;\n    setAnswers(newAnswers);\n  }; //Metodo utilizado para guardar los datos que actuales del\n  //quiz en el registro de fases actual de la aventura\n\n\n  const guardaFase = e => {\n    //Para que no se refresque la pagina en el onSubmit\n    e.preventDefault();\n\n    if (question !== \"\" && answers.length >= 2 && answers.length <= 6) {\n      //ME hago con el estado actual del array de info de la aventura\n      let new_state = props.getState('DATA', [{}]); //Preparo el diccionario que voy a meter en el registro\n\n      let myData = {\n        tipo: \"QuizStage\",\n        Pregunta: question,\n        Respuestas: answers\n      };\n      console.log(\"Sobreescribir es igual a \" + sobreEscribir);\n\n      if (sobreEscribir === true) {\n        //De esta forma se puede meter el estado en unaposicion concreta en lugar de hacerlo en el final siempre\n        let position = props.getState('WhereToPush', 1);\n        new_state.splice(position, 1, myData);\n      } //Si no hay que sobreescribir nada simplemente pusheamos al final de los datos\n      else {\n        //Lo almaceno en la lista de fases que tengo disponibles\n        new_state.push(myData);\n      } //Y tras modificar la copia del registro para que me contenga pongo esta copia como el registro de la aventura\n\n\n      props.setState('DATA', new_state, [{}]); //Importante aumentar el indice de donde estamos metiendo nuevos elementos a la aventura para que no \n      //se metan todos en la posicion X y que luego estén TODOS EN ORDEN INVERSO\n\n      props.setState('WhereToPush', props.getState('WhereToPush', 1) + 1, 1);\n    } else {\n      console.log(\"Rellena bien\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Configuracion de evento de quiz:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"A\\xF1ada aqui la pregunta del cuestionario\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: question,\n        onChange: e => modifyQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Pregunta actual: \", question]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleNewQuestion,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: currAnswer,\n        onChange: e => setCurrAnswer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Add Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-md-left\",\n          style: {\n            textDecoration: answer.isCorrect ? \"underline\" : \" \"\n          },\n          children: answer.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-primary mt-2\",\n          onClick: () => setAnswerAsCorrect(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !answer.isCorrect ? \"Correcta\" : \"Incorrecta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-danger mt-2\",\n          onClick: () => removeAnswer(index),\n          children: \"Borrar respuesta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 16\n        }, this)]\n      }, \"Respuesta: \" + index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: guardaFase,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Guardar Fase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"IrPDgtH2dCQ4QknyR16rIPi5RQY=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Universidad/4Universidad/TFG/TFG-Ejecutor-de-busquedas-del-tesoro/ReactDesdeEjemplo/src/components/formOne/steps/Quiz.tsx"],"names":["React","Fragment","useState","useEffect","Quiz","props","question","setQuestion","answers","setAnswers","currAnswer","setCurrAnswer","sobreEscribir","setSobreEscribir","getState","console","log","setState","estadoACargar","pregunta","respuesta","verdad","Pregunta","Respuestas","length","futurasRespuestas","i","respuestaActual","text","isCorrect","push","index","setIndex","order","modifyQuestion","e","handleNewQuestion","preventDefault","addAnswer","removeAnswer","newAnswers","splice","setAnswerAsCorrect","guardaFase","new_state","myData","tipo","position","target","value","map","answer","textDecoration"],"mappings":"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","sourcesContent":["import { queries } from \"@testing-library/react\";\r\nimport { StepComponentProps } from '../../Steps';\r\nimport React, {Fragment, useState, useEffect  } from \"react\"\r\nimport { createSemicolonClassElement } from \"typescript\";\r\n\r\n  \r\n\r\nconst Quiz = (props: StepComponentProps): JSX.Element => {\r\n\r\n    interface Answer {\r\n        text: string;\r\n        isCorrect: boolean;\r\n    }\r\n\r\n    //Esto es como un using en c++\r\n    type FormElement = React.FormEvent<HTMLFormElement>;\r\n\r\n    //Donde almacenamos la pregunta\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    //Array con las posibles respuestas a esa pregunta\r\n    const [answers, setAnswers] = useState<Answer[]>([]);\r\n    //Respuesta en proceso\r\n    const [currAnswer, setCurrAnswer] = useState<string>(\"\");\r\n\r\n    const [sobreEscribir, setSobreEscribir] = useState<boolean>(false);\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        if(props.getState<boolean>('SobreEscribir', false)) {\r\n            console.log(\"Es hora de sobreesribir pregunta directamente\");\r\n            setSobreEscribir(true);\r\n            console.log(\"El estado es \"+ sobreEscribir);\r\n        }\r\n\r\n        if(props.getState<boolean>('SobreEscribir', false)){\r\n            //Indico que ya no es necesario sobreescribir nada\r\n            props.setState('SobreEscribir', false, false);\r\n            //Me quedo con lo que haya que sobreescribir\r\n            let estadoACargar = props.getState<any>('DatosASobreEscribir', {pregunta:\"hola\", answers:[{respuesta:\"\", verdad:false}]} ); \r\n            \r\n            //Me guardo tando la pregunta como las respuestas que había configuradas\r\n            setQuestion(estadoACargar.Pregunta);\r\n\r\n            console.log(estadoACargar);\r\n            console.log(\"la longitud es \"+ estadoACargar.Respuestas.length);\r\n            let futurasRespuestas:Answer[] = [];\r\n            for(let i = 0; i < estadoACargar.Respuestas.length;i++){\r\n                let respuestaActual = (estadoACargar.Respuestas[i] as Answer);\r\n                console.log(\"Respuesta numero \"+i + \" \" + respuestaActual.text+ \" y es \"+ respuestaActual.isCorrect );\r\n                console.log(respuestaActual);\r\n                futurasRespuestas.push(respuestaActual);\r\n            }\r\n            setAnswers(futurasRespuestas);\r\n        }\r\n        console.log(\"Acabo de aparecer en pantalla\")\r\n\r\n        //Este cógigo se ejecuta EXCLUSIVAMENTE cuando se va a desmontar el componente\r\n        return () => {console.log(\"Quiz se acaba de desmontar\");if(props.getState<boolean>('SobreEscribir', false))props.setState('SobreEscribir', false, false);}\r\n      }, []);\r\n    \r\n    //const [quizAddFunction, setFuncion] = useState<Function>(props.funcion);\r\n    const [index, setIndex] = useState(props.order);\r\n\r\n        \r\n    const modifyQuestion = (e:string):void =>{\r\n        setQuestion(e);\r\n    }\r\n\r\n\r\n    const handleNewQuestion = (e:FormElement):void =>{\r\n        e.preventDefault();\r\n        addAnswer(currAnswer);\r\n        setCurrAnswer(\"\");\r\n    }\r\n\r\n\r\n    const addAnswer = (text:string):void =>{\r\n        console.log(\"Respuesta añadida\");\r\n        setAnswers([...answers, {text, isCorrect:false}]);\r\n    }\r\n\r\n    const removeAnswer = (index:number): void =>{\r\n        const newAnswers: Answer[] = [...answers];\r\n        newAnswers.splice(index, 1);\r\n        setAnswers(newAnswers);\r\n    }\r\n\r\n    const setAnswerAsCorrect = (index:number):void =>{\r\n        const newAnswers: Answer[] = [...answers];\r\n        newAnswers[index].isCorrect = !newAnswers[index].isCorrect;\r\n        setAnswers(newAnswers);\r\n    }\r\n\r\n\r\n    //Metodo utilizado para guardar los datos que actuales del\r\n    //quiz en el registro de fases actual de la aventura\r\n    const guardaFase = (e:FormElement) => {\r\n        //Para que no se refresque la pagina en el onSubmit\r\n        e.preventDefault()\r\n        if (question !== \"\" && answers.length >= 2 && answers.length <= 6){\r\n\r\n            //ME hago con el estado actual del array de info de la aventura\r\n            let new_state = props.getState<[{}]>('DATA', [{}]); \r\n            //Preparo el diccionario que voy a meter en el registro\r\n            let myData = {tipo:\"QuizStage\" ,Pregunta: question, Respuestas: answers};\r\n\r\n            console.log(\"Sobreescribir es igual a \"+sobreEscribir);\r\n            if(sobreEscribir === true){\r\n                //De esta forma se puede meter el estado en unaposicion concreta en lugar de hacerlo en el final siempre\r\n                let position = props.getState<number>('WhereToPush',1);\r\n                new_state.splice(position,1,myData);\r\n            }\r\n            //Si no hay que sobreescribir nada simplemente pusheamos al final de los datos\r\n            else {\r\n                //Lo almaceno en la lista de fases que tengo disponibles\r\n                new_state.push(myData);\r\n            }\r\n\r\n\r\n            //Y tras modificar la copia del registro para que me contenga pongo esta copia como el registro de la aventura\r\n            props.setState('DATA',new_state,[{}]);\r\n\r\n            //Importante aumentar el indice de donde estamos metiendo nuevos elementos a la aventura para que no \r\n            //se metan todos en la posicion X y que luego estén TODOS EN ORDEN INVERSO\r\n            props.setState<number>('WhereToPush',props.getState<number>('WhereToPush',1)+1,1);\r\n        }\r\n        else{\r\n            console.log(\"Rellena bien\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Configuracion de evento de quiz:</h2>\r\n            <form onSubmit={e => e.preventDefault() }>\r\n                <h3>Añada aqui la pregunta del cuestionario</h3>\r\n                <input className=\"form-control\" type=\"text\" required value={question} onChange ={ e =>modifyQuestion(e.target.value)}></input>\r\n            </form>\r\n\r\n            <h2>Pregunta actual: {question}</h2>\r\n\r\n            <form onSubmit={handleNewQuestion}>\r\n                <input className= \"form-control\" type=\"text\" required value={currAnswer} onChange={e =>setCurrAnswer(e.target.value)}></input>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Add Answer</button>\r\n            </form>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n\r\n            <section>\r\n            {answers.map((answer: Answer, index:number) => (\r\n            <Fragment key={\"Respuesta: \" + index}>\r\n               <div className=\"text-md-left\" style={{textDecoration: answer.isCorrect ? \"underline\" : \" \"}}>{answer.text}</div>\r\n               <button className=\"btn btn-outline-primary mt-2\" onClick = {():void => setAnswerAsCorrect(index)}>\r\n                   <div>{!answer.isCorrect ? \"Correcta\" : \"Incorrecta\"}</div>\r\n               </button>\r\n               <button className = \"btn btn-outline-danger mt-2\" onClick={():void => removeAnswer(index)}>Borrar respuesta</button>\r\n           </Fragment>\r\n            ))}\r\n            </section>\r\n\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <form onSubmit= {guardaFase}>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Guardar Fase</button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}