{"ast":null,"code":"var _jsxFileName = \"C:\\\\Universidad\\\\4Universidad\\\\TFG\\\\TFG-Ejecutor-de-busquedas-del-tesoro\\\\ReactDesdeEjemplo\\\\src\\\\components\\\\formOne\\\\steps\\\\Quiz.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  //Esto es como un using en c++\n  //Donde almacenamos la pregunta\n  const [question, setQuestion] = useState(\"\"); //Array con las posibles respuestas a esa pregunta\n\n  const [answers, setAnswers] = useState([]); //Respuesta en proceso\n\n  const [currAnswer, setCurrAnswer] = useState(\"\");\n  const [sobreEscribir, setSobreEscribir] = useState(false);\n  useEffect(() => {\n    setSobreEscribir(props.getState('SobreEscribir', false));\n\n    if (sobreEscribir) {\n      props.setState('SobreEscribir', false, false);\n      let new_state = props.getState('DatosASobreEscribir', {\n        pregunta: \"hola\",\n        answers: [{}]\n      });\n      setQuestion(new_state.pregunta);\n\n      for (let i = 0; i < new_state.answers.length; i++) {}\n\n      setAnswers([...answers, {\n        text,\n        isCorrect: false\n      }]);\n      let myData = {\n        tipo: \"QuizStage\",\n        Pregunta: question,\n        Respuestas: answers\n      };\n      let position = props.getState('WhereToPush', 1);\n      new_state.splice(position, 0, myData);\n      props.setState('DATA', new_state, [{}]);\n      props.setState('WhereToPush', props.getState('WhereToPush', 1) + 1, 1);\n    }\n\n    console.log(\"Acabo de aparecer en pantalla\");\n  }, []); //const [quizAddFunction, setFuncion] = useState<Function>(props.funcion);\n\n  const [index, setIndex] = useState(props.order);\n\n  const modifyQuestion = e => {\n    setQuestion(e);\n  };\n\n  const handleNewQuestion = e => {\n    e.preventDefault();\n    addAnswer(currAnswer);\n    setCurrAnswer(\"\");\n  };\n\n  const addAnswer = text => {\n    console.log(\"Respuesta añadida\");\n    setAnswers([...answers, {\n      text,\n      isCorrect: false\n    }]);\n  };\n\n  const removeAnswer = index => {\n    const newAnswers = [...answers];\n    newAnswers.splice(index, 1);\n    setAnswers(newAnswers);\n  };\n\n  const setAnswerAsCorrect = index => {\n    const newAnswers = [...answers];\n    newAnswers[index].isCorrect = !newAnswers[index].isCorrect;\n    setAnswers(newAnswers);\n  }; //Metodo utilizado para guardar los datos que actuales del\n  //quiz en el registro de fases actual de la aventura\n\n\n  const guardaFase = e => {\n    //Para que no se refresque la pagina en el onSubmit\n    e.preventDefault();\n\n    if (question !== \"\" && answers.length >= 2 && answers.length <= 6) {\n      //ME hago con el estado actual del array de info de la aventura\n      let new_state = props.getState('DATA', [{}]); //Preparo el diccionario que voy a meter en el registro\n\n      let myData = {\n        tipo: \"QuizStage\",\n        Pregunta: question,\n        Respuestas: answers\n      }; //Lo almaceno en la lista de fases que tengo disponibles\n      //new_state.push(myData);\n      //De esta forma se puede meter el estado en unaposicion concreta en lugar de hacerlo en el final siempre\n\n      let position = props.getState('WhereToPush', 1);\n      new_state.splice(position, 0, myData); //Y tras modificar la copia del registro para que me contenga pongo esta copia como el registro de la aventura\n\n      props.setState('DATA', new_state, [{}]); //Importante aumentar el indice de donde estamos metiendo nuevos elementos a la aventura para que no \n      //se metan todos en la posicion X y que luego estén TODOS EN ORDEN INVERSO\n\n      props.setState('WhereToPush', props.getState('WhereToPush', 1) + 1, 1);\n    } else {\n      console.log(\"Rellena bien\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Configuracion de evento de quiz:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"A\\xF1ada aqui la pregunta del cuestionario\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: question,\n        onChange: e => modifyQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Pregunta actual: \", question]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleNewQuestion,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: currAnswer,\n        onChange: e => setCurrAnswer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Add Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-md-left\",\n          style: {\n            textDecoration: answer.isCorrect ? \"underline\" : \" \"\n          },\n          children: answer.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-primary mt-2\",\n          onClick: () => setAnswerAsCorrect(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !answer.isCorrect ? \"Correcta\" : \"Incorrecta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-danger mt-2\",\n          onClick: () => removeAnswer(index),\n          children: \"Borrar respuesta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 16\n        }, this)]\n      }, \"Respuesta: \" + index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: guardaFase,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Guardar Fase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"IrPDgtH2dCQ4QknyR16rIPi5RQY=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Universidad/4Universidad/TFG/TFG-Ejecutor-de-busquedas-del-tesoro/ReactDesdeEjemplo/src/components/formOne/steps/Quiz.tsx"],"names":["React","Fragment","useState","useEffect","Quiz","props","question","setQuestion","answers","setAnswers","currAnswer","setCurrAnswer","sobreEscribir","setSobreEscribir","getState","setState","new_state","pregunta","i","length","text","isCorrect","myData","tipo","Pregunta","Respuestas","position","splice","console","log","index","setIndex","order","modifyQuestion","e","handleNewQuestion","preventDefault","addAnswer","removeAnswer","newAnswers","setAnswerAsCorrect","guardaFase","target","value","map","answer","textDecoration"],"mappings":"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","sourcesContent":["import { queries } from \"@testing-library/react\";\r\nimport { StepComponentProps } from '../../Steps';\r\nimport React, {Fragment, useState, useEffect  } from \"react\"\r\nimport { createSemicolonClassElement } from \"typescript\";\r\n\r\n  \r\n\r\nconst Quiz = (props: StepComponentProps): JSX.Element => {\r\n\r\n    interface Answer {\r\n        text: string;\r\n        isCorrect: boolean;\r\n    }\r\n\r\n    //Esto es como un using en c++\r\n    type FormElement = React.FormEvent<HTMLFormElement>;\r\n\r\n    //Donde almacenamos la pregunta\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    //Array con las posibles respuestas a esa pregunta\r\n    const [answers, setAnswers] = useState<Answer[]>([]);\r\n    //Respuesta en proceso\r\n    const [currAnswer, setCurrAnswer] = useState<string>(\"\");\r\n\r\n    const [sobreEscribir, setSobreEscribir] = useState<boolean>(false);\r\n\r\n    \r\n    useEffect(() => {\r\n        setSobreEscribir(props.getState<boolean>('SobreEscribir', false))\r\n        if(sobreEscribir){\r\n\r\n            props.setState('SobreEscribir', false, false);\r\n            let new_state = props.getState<{pregunta:string, answers:[{}]}>('DatosASobreEscribir', {pregunta:\"hola\", answers:[{}]} ); \r\n            setQuestion(new_state.pregunta);\r\n            for(let i = 0; i < new_state.answers.length;i++){\r\n            }\r\n\r\n            setAnswers([...answers, {text, isCorrect:false}]);\r\n\r\n\r\n             let myData = {tipo:\"QuizStage\" ,Pregunta: question, Respuestas: answers};\r\n             let position = props.getState<number>('WhereToPush',1);\r\n             new_state.splice(position,0,myData);\r\n             props.setState('DATA',new_state,[{}]);\r\n             props.setState<number>('WhereToPush',props.getState<number>('WhereToPush',1)+1,1);\r\n        }\r\n        console.log(\"Acabo de aparecer en pantalla\")\r\n      }, []);\r\n    \r\n    //const [quizAddFunction, setFuncion] = useState<Function>(props.funcion);\r\n    const [index, setIndex] = useState(props.order);\r\n\r\n        \r\n    const modifyQuestion = (e:string):void =>{\r\n        setQuestion(e);\r\n    }\r\n\r\n\r\n    const handleNewQuestion = (e:FormElement):void =>{\r\n        e.preventDefault();\r\n        addAnswer(currAnswer);\r\n        setCurrAnswer(\"\");\r\n    }\r\n\r\n\r\n    const addAnswer = (text:string):void =>{\r\n        console.log(\"Respuesta añadida\");\r\n        setAnswers([...answers, {text, isCorrect:false}]);\r\n    }\r\n\r\n    const removeAnswer = (index:number): void =>{\r\n        const newAnswers: Answer[] = [...answers];\r\n        newAnswers.splice(index, 1);\r\n        setAnswers(newAnswers);\r\n    }\r\n\r\n    const setAnswerAsCorrect = (index:number):void =>{\r\n        const newAnswers: Answer[] = [...answers];\r\n        newAnswers[index].isCorrect = !newAnswers[index].isCorrect;\r\n        setAnswers(newAnswers);\r\n\r\n    }\r\n\r\n\r\n    //Metodo utilizado para guardar los datos que actuales del\r\n    //quiz en el registro de fases actual de la aventura\r\n    const guardaFase = (e:FormElement) => {\r\n        //Para que no se refresque la pagina en el onSubmit\r\n        e.preventDefault()\r\n        if (question !== \"\" && answers.length >= 2 && answers.length <= 6){\r\n\r\n            //ME hago con el estado actual del array de info de la aventura\r\n            let new_state = props.getState<[{}]>('DATA', [{}]); \r\n            //Preparo el diccionario que voy a meter en el registro\r\n            let myData = {tipo:\"QuizStage\" ,Pregunta: question, Respuestas: answers};\r\n\r\n            //Lo almaceno en la lista de fases que tengo disponibles\r\n            //new_state.push(myData);\r\n\r\n            //De esta forma se puede meter el estado en unaposicion concreta en lugar de hacerlo en el final siempre\r\n            let position = props.getState<number>('WhereToPush',1);\r\n            new_state.splice(position,0,myData);\r\n\r\n            //Y tras modificar la copia del registro para que me contenga pongo esta copia como el registro de la aventura\r\n            props.setState('DATA',new_state,[{}]);\r\n\r\n            //Importante aumentar el indice de donde estamos metiendo nuevos elementos a la aventura para que no \r\n            //se metan todos en la posicion X y que luego estén TODOS EN ORDEN INVERSO\r\n            props.setState<number>('WhereToPush',props.getState<number>('WhereToPush',1)+1,1);\r\n        }\r\n        else{\r\n            console.log(\"Rellena bien\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Configuracion de evento de quiz:</h2>\r\n            <form onSubmit={e => e.preventDefault() }>\r\n                <h3>Añada aqui la pregunta del cuestionario</h3>\r\n                <input className=\"form-control\" type=\"text\" required value={question} onChange ={ e =>modifyQuestion(e.target.value)}></input>\r\n            </form>\r\n\r\n            <h2>Pregunta actual: {question}</h2>\r\n\r\n            <form onSubmit={handleNewQuestion}>\r\n                <input className= \"form-control\" type=\"text\" required value={currAnswer} onChange={e =>setCurrAnswer(e.target.value)}></input>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Add Answer</button>\r\n            </form>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n\r\n            <section>\r\n            {answers.map((answer: Answer, index:number) => (\r\n            <Fragment key={\"Respuesta: \" + index}>\r\n               <div className=\"text-md-left\" style={{textDecoration: answer.isCorrect ? \"underline\" : \" \"}}>{answer.text}</div>\r\n               <button className=\"btn btn-outline-primary mt-2\" onClick = {():void => setAnswerAsCorrect(index)}>\r\n                   <div>{!answer.isCorrect ? \"Correcta\" : \"Incorrecta\"}</div>\r\n               </button>\r\n               <button className = \"btn btn-outline-danger mt-2\" onClick={():void => removeAnswer(index)}>Borrar respuesta</button>\r\n           </Fragment>\r\n            ))}\r\n            </section>\r\n\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <form onSubmit= {guardaFase}>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Guardar Fase</button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}