{"ast":null,"code":"var _jsxFileName = \"C:\\\\Universidad\\\\4Universidad\\\\TFG\\\\TFG-Ejecutor-de-busquedas-del-tesoro\\\\ReactDesdeEjemplo\\\\src\\\\components\\\\Steps.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/**\n * Gestor de secuencias de pasos, con un estado interno formado por los\n * estados parciales de cada uno de las etapas individuales. \n * Tomado principalmente de https://github.com/sametweb/react-step-builder/blob/master/src/lib-ts/index.tsx.\n * Esta versión pretende permitir realizar cambios puntuales sobre dicho código\n * para ajustarlo a nuestras necesidades (por ejemplo para modificar de forma más\n * conveniente los tipos de datos de los formularios asociados), y disponer de una \n * versión \"comentada\" donde se explique cómo funciona internamente el módulo.\n * \n * El mayor cambio incluído aquí está destinado a reubicar el estado del formulario\n * en el componente padre (donde se declaran los pasos), y de este modo permitir el \n * acceso al mismo desde un nivel superior al ámbito del contexto de pasos que se define aquí.\n */\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { createContext } from \"react\";\nimport './Styles/Steps.css'; //--------------------------------------------------------------\n//             Definición de un Paso Concreto\n//--------------------------------------------------------------\n\n/**\n * Comenzaremos definiendo la noción de paso dentro de un listado \n * de pasos o etapas de nuestro formulario. Notamos que una buena parte de los tipos\n * descritos a continuación hacen referencia al contexto global al que todo\n * paso tendrá acceso al estar declarado dentro de `Steps`.\n * \n * Si se declara un paso fuera de un entorno `Steps`, el contexto recibido\n * será el que establezcamos por defecto más abajo, esencialmente un objeto\n * con un montón de valores dummies por defecto.\n */\n\n/**\n * Lo primero que haremos será definirnos una noción de entrada en la lista de\n * pasos que gestionamos. Por el momento nos bastará con mantener información\n * relativa al nombre asignado a un paso y a su posición dentro de la lista.\n * Es importante remarcar aquí que la información de estas entradas será puramente\n * \"cosmética\", en el sentido de que no resultará esencial para garantizar el correcto\n * funcionamiento de los componentes/ pasos. No obstante, sí que resulta conveniente\n * para, por ejemplo, mostrar números de etapa dentro de cada componente de paso,\n * títulos que identifiquen cada uno de ellos, etc.\n */\n\n/** Auxiliary type containing the name and the order of a given state within the context */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n;\n/**\n * Por último, se incluye un contexto \"de paso\", que esencialmente se limita\n * a proporcionar información relativa al orden del paso en la secuencia de pasos.\n * Esto se pasa como contexto por no ensuciar innecesariamente los props de un \n * elemento concreto (ver más adelante cómo se usa en Steps)\n */\n\n/**\n * Creación del contexto y determinación del valor por defecto del mismo.\n */\nconst StepContext = /*#__PURE__*/createContext({\n  order: 0\n});\n/**\n * Wrapper component for each individual step.\n */\n\nfunction Step(props) {\n  _s();\n\n  // obtención de la posición en la lista a partir del contexto\n  // OJO: Aquí se asume que este contexto existirá por estar el paso\n  // incluído dentro de algún `Steps`.\n  const {\n    order\n  } = useContext(StepContext); // obtención de los elementos garantizados en los props\n\n  const {\n    title,\n    component,\n    onStepLoaded\n  } = props; // obtención del resto del contexto general\n\n  const stepsContextValue = useContext(StepsContext); // desde el cual se extrae la cuenta para calcular los parámetros de navegación.\n\n  const {\n    stepCount,\n    currentStep\n  } = stepsContextValue; // comprobaciones que serán inyectadas como props en el componente de paso\n  // y que le servirán para saber su posición en la lista y si tiene más elementos\n  // antes o después.\n\n  const isFirst = () => order === 0;\n\n  const isLast = () => order === stepCount;\n\n  const hasNext = () => order + 1 < stepCount;\n\n  const hasPrev = () => order > 0; // si acabamos de cargar este paso, y hemos especificado una acción a realizar en\n  // dicho momento, la ejecutamos.\n\n\n  useEffect(() => {\n    return () => {\n      if (currentStep === order && onStepLoaded) onStepLoaded();\n    };\n  }, [currentStep, order, onStepLoaded]); // SÓLO se renderizan aquellos pasos cuyo orden coincida con el paso\n  // actual del contexto general.\n\n  if (order === currentStep) {\n    const exclusiveProps = { ...props\n    };\n    const defaultTitle = \"Step \" + order; // Forzamos el tipo para calmar al type checker. De esta forma le aseguramos que\n    // nunca vamos a tener un componente que tenga más parámetros que los básicos\n    // más posiblemente un listado de campos exclusivos.\n\n    const Component = component;\n    return /*#__PURE__*/_jsxDEV(Component, { ...exclusiveProps,\n      ...stepsContextValue,\n      title: title || defaultTitle,\n      order: order,\n      hasPrev: hasPrev,\n      hasNext: hasNext,\n      isFirst: isFirst,\n      isLast: isLast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 8\n    }, this);\n  }\n\n  return null;\n} //--------------------------------------------------------------\n//             Definición del Gestor de Pasos\n//--------------------------------------------------------------\n\n/**\n * Una vez disponemos de las definiciones de un paso concreto, podemos \n * pasar a definir el gestor general que mantendrá el estado global de \n * los pasos y ejecutará la lógica de carga y descarga de cada uno de ellos.\n */\n\n/**\n * En vez de un estado que sólo permita como valores los tipos clásicos de formularios\n * (strings, números y booleanos), vamos a utilizar el tipo unknown aquí como forma de \n * tener estados más generales. El tipo `unknown` es la forma explícita de decirle a TS\n * que el valor correspondiente podría ser cualquier cosa (como `any`), pero a diferencia\n * de este último, `unkown` exige un casting explícito a un tipo conocido antes de poder \n * usarse (lo cual tiende a ser mucho más seguro que llamar a métodos o propiedades de un\n * objeto sobre el que no tenemos nada garantizado, como suele ser el caso con `any`).\n */\n\n/**\n * Definition of a (general) state to be handled by our context.\n * Values are always of type unknown to ensure that we can store anything within a dictionary entry.\n */\n\n\n_s(Step, \"vHnD1B+k9xv6l7s6ImMXXAp/qog=\");\n\n_c = Step;\n\n/**\n * Con esto es posible crear un contexto (con un valor por defecto\n * para que el comprobador de tipos de TS no lance errores) que podrá\n * ser empleado desde cualquiera de los pasos para acceder a la información \n * del estado de nuestro gestor. Como nota, lo que definimos aquí es el contexto\n * como entidad más o menos abstracta, luego podremos instanciar tantos proveedores\n * de este contexto como deseemos, cada uno con un estado propio particular.\n */\nconst StepsContext = /*#__PURE__*/createContext({\n  // Dummy values for satisfying the type checker\n  // Gets updated before being passed down\n  stepCount: 0,\n  currentStep: 0,\n  stepList: [],\n  state: {},\n  setState: (_, __) => {},\n  getState: (_, __) => __,\n  next: () => {},\n  prev: () => {},\n  jump: _ => {}\n});\n/**\n * Al definir los props del gestor de pasos, podemos imponer un tipo determinado \n * para los hijos de este componente mediante el uso de ReactElement<T>. Esencialmente,\n * esto nos permitirá lanzar errores en compilación si alguien trata de añadir un hijo \n * a un componente `<Steps>` que no reciba como props, al menos, un tipo de datos que contenga\n * todos los campos de `StepProps` (se podrían usar tipos más extensos). La unión aquí es necesaria\n * porque React hace distinción entre un hijo suelto y un listado de hijos (un hijo suelto\n * NO es un listado con un elemento).\n * \n * La configuración de los pasos permite especificar cómo queremos que se comporte el gestor,\n * incluyendo además la posibilidad de incorporar componentes exclusivos de navegación, before y\n * after (que van antes y después del cuerpo principal, respectivamente).\n */\n\n;\n/**\n * Esta configuración incluye básicamente tres elementos fundamentales:\n * + `before`: función que genera un componente de React a partir de unos props (componente funcional)\n * de manera que dicho componente quedará colocado antes de renderizar el contenido del paso activo.\n * \n * + `after`: como before, pero se colocará después del contenido del paso activo.\n * \n * + `navigation`: contiene tanto un componente general de navegación (generalmente para listar los\n * pasos y permitir saltar de uno a otro de forma explícita) como la ubicación relativa al contenido \n * del paso donde deberá colocarse.\n */\n\n/**\n * Con todo lo anterior, estamos en disposición de pasar a hablar del propio componente\n * de gestión de pasos. Este toma como props la configuración descrita anteriormente y una \n * serie de hijos con tipos restringidos a componentes con props que sabe entender.\n */\n\n/**\n * Wrapper component for `Step` components.\n */\nfunction Steps(_ref) {\n  _s2();\n\n  var _config$navigation3, _config$navigation4;\n\n  let {\n    children,\n    config,\n    genState,\n    setGenState\n  } = _ref;\n  // referencia a cada uno de los hijos del componente en formato array\n  // esto servirá para poblar la lista de elementos que podrá ser consumida\n  // por los pasos individuales a partir del contexto general.\n  const childSteps = React.Children.toArray(children);\n\n  const NavigationComponent = context => {\n    var _config$navigation;\n\n    if (config !== null && config !== void 0 && (_config$navigation = config.navigation) !== null && _config$navigation !== void 0 && _config$navigation.component) {\n      var _config$navigation2;\n\n      const NavComponent = config === null || config === void 0 ? void 0 : (_config$navigation2 = config.navigation) === null || _config$navigation2 === void 0 ? void 0 : _config$navigation2.component;\n      return /*#__PURE__*/_jsxDEV(NavComponent, { ...context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 15\n      }, this);\n    }\n  };\n\n  const BeforeComponent = context => {\n    if (config !== null && config !== void 0 && config.before) {\n      const Before = config.before;\n      return /*#__PURE__*/_jsxDEV(Before, { ...context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 15\n      }, this);\n    }\n  };\n\n  const AfterComponent = context => {\n    if (config !== null && config !== void 0 && config.after) {\n      const After = config.after;\n      return /*#__PURE__*/_jsxDEV(After, { ...context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 15\n      }, this);\n    }\n  };\n  /**\n   * Generar las entradas \"cosméticas\" de las que hablábamos antes para proporcionar\n   * información adicional a los pasos a partir de los hijos del componente.\n   */\n\n\n  const stepList = childSteps.map((child, order) => {\n    return {\n      name: child.props.title || \"Step \" + (order + 1),\n      order: order\n    };\n  }); //----------------------------------------------\n  //       Creación del Contexto Global\n  //----------------------------------------------\n  // número de pasos.\n\n  const stepCount = childSteps.length; // paso actual (renderizándose en este momento)\n\n  const _currentStep = useState(0);\n\n  const currentStep = _currentStep[0];\n  const setCurrentStep = _currentStep[1]; // gestionar el avance al siguiente paso\n\n  const next = () => {\n    if (currentStep + 1 < stepCount) {\n      setCurrentStep(currentStep + 1);\n    }\n  }; // gestionar el retroceso al paso previo\n\n\n  const prev = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  }; // gestionar un salto a un paso concreto\n\n\n  const jump = step => {\n    if (step >= 0 && step < stepCount) {\n      setCurrentStep(step);\n    }\n  }; // obtener un campo del estado por clave\n\n\n  function getState(key, defaultValue) {\n    if (key in genState) {\n      return genState[key];\n    }\n\n    return defaultValue;\n  }\n\n  ; // sobrescribir un campo del estado por clave\n\n  function setState(key, setValue, initialValue) {\n    if (typeof setValue === \"function\" && setValue.length === 1) {\n      /**\n       * Este tipo de asignación resulta fundamental para evitar conflictos a la hora de modificar el estado.\n       * Cuando se hacen múltiples setState sobre una propiedad mantenida por medio de un useState (y en nuestro\n       * caso esto va a estar ocurriendo a menudo, puesto que modificar dos o más propiedades en un mismo render\n       * va a llevar a que se modifique el mismo estado general varias veces), SÓLO se mantiene el último cambio,\n       * lo cual quiere decir que si modificamos los campos A y B, sólo se mantendrá el valor al asignar el campo B,\n       * quedando la asignación a A ignorada. Para evitar esto, se puede utilizar el patrón de actualización sobre\n       * el valor previo (prev => ...) que SÍ que se combina con sucesivas asignaciones (se encadena).\n       */\n      setGenState(prevState => {\n        // setValue es un método ((prevState: S) => S)\n        const newState = Object.assign({}, prevState);\n\n        if (newState[key]) {\n          newState[key] = setValue(newState[key]);\n        } else {\n          newState[key] = setValue(initialValue);\n        }\n\n        return newState;\n      });\n    } else {\n      const pureValue = setValue;\n      setGenState(prevState => {\n        // setValue es un valor sin más => asignación directa\n        const newState = Object.assign({}, prevState);\n        newState[key] = pureValue;\n        return newState;\n      });\n    }\n  }\n\n  ;\n  const context = {\n    stepCount,\n    currentStep,\n    stepList,\n    state: genState,\n    setState,\n    getState,\n    next,\n    prev,\n    jump\n  };\n\n  const downloadFile = (data, fileName, fileType) => {\n    // Create a blob with the data we want to download as a file\n    const blob = new Blob([data], {\n      type: fileType\n    }); // Create an anchor element and dispatch a click event on it\n    // to trigger a download\n\n    const a = document.createElement('a');\n    a.download = fileName;\n    a.href = window.URL.createObjectURL(blob);\n    const clickEvt = new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true\n    });\n    a.dispatchEvent(clickEvt);\n    a.remove();\n  }; //Para exportar los datos a un JSON lo que hago es preparar un array, y en este array voy a meter las cosas que me vayan dando los eventos\n\n\n  const exportToJson = () => {\n    // //Una vez que tengo los datos de cada evento, preparo un JSON y lo descargo\n    var datos = [];\n    let f = getState('DATA', []);\n    console.log(genState);\n\n    for (let i = 0; i < f.length; i++) {\n      datos.push(f[i]);\n    }\n\n    var jsonFinal = {\n      Gencana: \"Nombre\",\n      fases: datos\n    };\n    downloadFile(JSON.stringify(jsonFinal, null, 2), 'answers.json', 'text/json');\n  }; //Este método tiene como objetivo gestionar la escena a la que se quiere ir por medio del selector\n  //Lo que hace es mirar que se acaba de seleccionar y dependiendo de lo escogido nos vamos a una escena \n  //u otra\n\n\n  const UpdateSelector = evt => {\n    evt.preventDefault();\n    let s = evt.currentTarget.value;\n    let destiny = 0;\n\n    if (s === \"QR\") {\n      destiny = 0;\n    } else if (s === \"Quiz\") {\n      destiny = 1;\n    } else if (s === \"Default\") {\n      return;\n    }\n\n    jump(destiny);\n  }; //MEtodo que aumenta en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n  //En caso de que no este en el rango adecuado lo clampeamos \n\n\n  const AumentarPosSiguienteFase = () => {\n    let value = getState('WhereToPush', 0) + 1;\n    let current_state = getState('DATA', []);\n    if (value > current_state.length) value = current_state.length;\n    setState('WhereToPush', value, 0);\n    console.log(value);\n  }; //MEtodo que disminuye en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n  //En caso de que no este en el rango adecuado lo dejamos como minimo en 1 \n\n\n  const DisminuirPosSiguienteFase = () => {\n    let value = getState('WhereToPush', 0) - 1;\n    if (value < 0) value = 0;\n    setState('WhereToPush', value, 0);\n    console.log(value);\n  }; //MEtodo que aumenta en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n  //En caso de que no este en el rango adecuado lo clampeamos \n\n\n  const AumentarPosSiguienteFaseConfigurable = () => {\n    let value = getState('FaseConfigurable', 0) + 1;\n    let current_state = getState('DATA', []);\n    if (current_state.length === 0) value = 0;else if (value >= current_state.length) value = current_state.length - 1;\n    setState('FaseConfigurable', value, 0);\n    console.log(value);\n  }; //MEtodo que disminuye en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n  //En caso de que no este en el rango adecuado lo dejamos como minimo en 1 \n\n\n  const DisminuirPosSiguienteFaseConfigurable = () => {\n    let value = getState('FaseConfigurable', 0) - 1;\n    if (value < 0) value = 0;\n    setState('FaseConfigurable', value, 0);\n    console.log(value);\n  }; //este método tiene como objetivo mirar qué fase es la que estamos seleccionando dentro de las que ya tenemos creadas\n  // e ir a la escena que representa esa fase para poder reconfigurarla \n\n\n  const ConfigurarFase = () => {\n    //Pregunto por cual es la fase que estamos seleccionando y me quedo con las fases disponibles\n    let value = getState('FaseConfigurable', 1);\n    let new_state = getState('DATA', [{}]);\n\n    if (new_state.length < 2) {\n      alert(\"No ha ninguna fase que configurar\");\n      return;\n    } //Indico que vamos a empezar a sobreescribir \n\n\n    setState('SobreEscribir', true, true); //miro a qué escena me tengo que ir para reconfigurar la fase que estoy intentando seleccionar\n\n    let escena = 0;\n    if (new_state[value].tipo === \"QRStage\") escena = 0;else if (new_state[value].tipo === \"QuizStage\") escena = 1;\n    jump(escena);\n  }; ///////////////////////////este código es una prueba para la furuta carga de JSONS por parte del jugador a la web, no va aun//////////////////////////////\n\n\n  const handleChange = e => {\n    //Si de casualidad ha habido un error y es null lo que he obtenido no se hace nada\n    if (e === null) return;\n    const fileReader = new FileReader();\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\n    let array = [];\n\n    fileReader.onload = e => {\n      {\n        /* @ts-ignore */\n      }\n      console.log(\"e.target.result\", e.target.result);\n      {\n        /* @ts-ignore */\n      }\n      console.log(\"El string es \" + e.target.result);\n      {\n        /* @ts-ignore */\n      }\n      let obj = JSON.parse(e.target.result);\n      {\n        /* @ts-ignore */\n      } // console.log( \"El nombre de la gencana es \"+ obj.fases);\n\n      let nuevasFases = []; //console.log(\"EL JSON es \" + obj);\n\n      for (let i = 0; i < obj.fases.length; i++) {\n        nuevasFases.push(obj.fases[i]);\n      }\n\n      setState('DATA', nuevasFases, []);\n      console.log(\"El estado actual es \" + getState('DATA', []));\n    };\n  }; ////////////////////////////////////////////////////////////\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Coso\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      className: \"input-file\",\n      accept: \".json\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Selector de fases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"Selector\",\n      className: \"form-select\",\n      onChange: UpdateSelector,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Default\",\n        children: \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"QR\",\n        children: \"QR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Quiz\",\n        children: \"Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Posicion a insertar la siguiente fase de la aventura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"row\",\n        \"data-testid\": \"<\",\n        onClick: DisminuirPosSiguienteFase,\n        children: \" - \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"row\",\n        children: [getState('WhereToPush', 0) + 1, \"\\xBA \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"row\",\n        \"data-testid\": \">\",\n        onClick: AumentarPosSiguienteFase,\n        children: \" + \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"row\",\n        children: [\"de los \", getState('DATA', []).length, \" actuales\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Fase que se quiere reconfigurar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"row\",\n        \"data-testid\": \"<\",\n        onClick: DisminuirPosSiguienteFaseConfigurable,\n        children: \" - \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"row\",\n        children: [getState('FaseConfigurable', 0) + 1, \"\\xBA \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"row\",\n        \"data-testid\": \">\",\n        onClick: AumentarPosSiguienteFaseConfigurable,\n        children: \" + \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"row\",\n        children: [\"de los \", getState('DATA', []).length, \" actuales\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"row\",\n        \"data-testid\": \">\",\n        onClick: ConfigurarFase,\n        children: \" Configurar Fase \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StepsContext.Provider, {\n      value: context,\n      children: [(config === null || config === void 0 ? void 0 : config.before) && BeforeComponent(context), (config === null || config === void 0 ? void 0 : (_config$navigation3 = config.navigation) === null || _config$navigation3 === void 0 ? void 0 : _config$navigation3.location) === \"before\" && NavigationComponent(context), React.Children.map(children, (child, order) => /*#__PURE__*/_jsxDEV(StepContext.Provider, {\n        value: {\n          order: order\n        },\n        children: child\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 10\n      }, this)), (config === null || config === void 0 ? void 0 : (_config$navigation4 = config.navigation) === null || _config$navigation4 === void 0 ? void 0 : _config$navigation4.location) === \"after\" && NavigationComponent(context), (config === null || config === void 0 ? void 0 : config.after) && AfterComponent(context)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: exportToJson,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Creame un JSON hijo mio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Steps, \"d4XLodobGBZNVgCyJf269XnXqXM=\");\n\n_c2 = Steps;\nexport { Steps, Step };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Step\");\n$RefreshReg$(_c2, \"Steps\");","map":{"version":3,"sources":["C:/Universidad/4Universidad/TFG/TFG-Ejecutor-de-busquedas-del-tesoro/ReactDesdeEjemplo/src/components/Steps.tsx"],"names":["React","useContext","useEffect","useState","createContext","StepContext","order","Step","props","title","component","onStepLoaded","stepsContextValue","StepsContext","stepCount","currentStep","isFirst","isLast","hasNext","hasPrev","exclusiveProps","defaultTitle","Component","stepList","state","setState","_","__","getState","next","prev","jump","Steps","children","config","genState","setGenState","childSteps","Children","toArray","NavigationComponent","context","navigation","NavComponent","BeforeComponent","before","Before","AfterComponent","after","After","map","child","name","length","_currentStep","setCurrentStep","step","key","defaultValue","setValue","initialValue","prevState","newState","Object","assign","pureValue","downloadFile","data","fileName","fileType","blob","Blob","type","a","document","createElement","download","href","window","URL","createObjectURL","clickEvt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","exportToJson","datos","f","console","log","i","push","jsonFinal","Gencana","fases","JSON","stringify","UpdateSelector","evt","preventDefault","s","currentTarget","value","destiny","AumentarPosSiguienteFase","current_state","DisminuirPosSiguienteFase","AumentarPosSiguienteFaseConfigurable","DisminuirPosSiguienteFaseConfigurable","ConfigurarFase","new_state","alert","escena","tipo","handleChange","e","fileReader","FileReader","readAsText","target","files","array","onload","result","obj","parse","nuevasFases","location"],"mappings":"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","sourcesContent":["/**\n * Gestor de secuencias de pasos, con un estado interno formado por los\n * estados parciales de cada uno de las etapas individuales. \n * Tomado principalmente de https://github.com/sametweb/react-step-builder/blob/master/src/lib-ts/index.tsx.\n * Esta versión pretende permitir realizar cambios puntuales sobre dicho código\n * para ajustarlo a nuestras necesidades (por ejemplo para modificar de forma más\n * conveniente los tipos de datos de los formularios asociados), y disponer de una \n * versión \"comentada\" donde se explique cómo funciona internamente el módulo.\n * \n * El mayor cambio incluído aquí está destinado a reubicar el estado del formulario\n * en el componente padre (donde se declaran los pasos), y de este modo permitir el \n * acceso al mismo desde un nivel superior al ámbito del contexto de pasos que se define aquí.\n */\n\n import React, { useContext, useEffect, useState } from \"react\";\n import { ComponentType, createContext, ReactElement } from \"react\";\nimport { json } from \"stream/consumers\";\nimport './Styles/Steps.css'\n \n \n //--------------------------------------------------------------\n //             Definición de un Paso Concreto\n //--------------------------------------------------------------\n \n /**\n  * Comenzaremos definiendo la noción de paso dentro de un listado \n  * de pasos o etapas de nuestro formulario. Notamos que una buena parte de los tipos\n  * descritos a continuación hacen referencia al contexto global al que todo\n  * paso tendrá acceso al estar declarado dentro de `Steps`.\n  * \n  * Si se declara un paso fuera de un entorno `Steps`, el contexto recibido\n  * será el que establezcamos por defecto más abajo, esencialmente un objeto\n  * con un montón de valores dummies por defecto.\n  */\n \n /**\n  * Lo primero que haremos será definirnos una noción de entrada en la lista de\n  * pasos que gestionamos. Por el momento nos bastará con mantener información\n  * relativa al nombre asignado a un paso y a su posición dentro de la lista.\n  * Es importante remarcar aquí que la información de estas entradas será puramente\n  * \"cosmética\", en el sentido de que no resultará esencial para garantizar el correcto\n  * funcionamiento de los componentes/ pasos. No obstante, sí que resulta conveniente\n  * para, por ejemplo, mostrar números de etapa dentro de cada componente de paso,\n  * títulos que identifiquen cada uno de ellos, etc.\n  */\n \n /** Auxiliary type containing the name and the order of a given state within the context */\n type StepEntry = {\n   /** position of the step within the list of steps (in the context data) */\n   order: number;\n   /** name of the step (identifier) */\n   name: string\n };\n \n /**\n  * Vamos a hacer una diferenciación entre StepProps y StepComponentProps:\n  * \n  * + `StepProps` se refiere a la base de la que heredarán los props de un componente `Step`,\n  * que serán los únicos componentes permitidos dentro del cuerpo de un componente `Steps`. \n  * En esencia, son los props de cualquiera de las entradas de tipo\n  * ```javascript\n  *  <Step title=\"My Step\" component={MyStepComponent} />\n  * ```\n  * con un callback opcional en `onStepLoaded` que permite especificar lógica adicional a \n  * ejecutar antes de realizar un cambio desde otro paso al paso actual (será llamado al entrar en él). \n  */\n export interface BasicStepProps<T extends StepComponentProps> {\n   /** Title of this step */\n   title?: string;\n   /** Component to be rendered as a step */\n   component: ComponentType<T>;\n   /** A callback function to run before step change occurs */\n   onStepLoaded?: () => void;\n };\n \n export type StepProps<T extends StepComponentProps> = BasicStepProps<T> & ExclusiveStepProps<T>;\n \n type ExclusiveStepProps<T> = Omit<T, keyof StepComponentProps>;\n \n \n /**\n  * + `StepComponentProps` representa la base mínima de props que deben incluir los componentes\n  * que definan un paso `<Step>` dentro de un entorno `<Steps>`. Esto permite imponer una cierta\n  * forma y estructura sobre los componentes empleados a modo de pasos. En el siguiente ejemplo:\n  * ```javascript\n  *  <Step title=\"My Step\" component={MyStepComponent} />\n  * ```\n  * `MyStepComponent` deberá ser un componente de React que tome como props un tipo o interfaz que \n  * contenga, como mínimo, todos los campos especificados en la definición de `StepComponentProps`.\n  * \n  * En realidad esto no supone un esfuerzo de implementación adicional desde el punto de vista de la\n  * generación de pasos, puesto que basta con establecer un tipo derivado de `StepComponentProps`\n  * como base de los props empleados para el paso a crear, y todas estas propiedades serán pobladas\n  * automáticamente simplemente por el hecho de estar en un entorno `Steps`.\n  */\n export interface StepComponentProps {\n   /** Order number of the current step component */\n   order: number;\n   /** Title of the current step component */\n   title: string;\n   /** Function to move to the next step */\n   next: () => void;\n   /** Function to move to the previous step */\n   prev: () => void;\n   /** Function to jump to the given step */\n   jump: (step: number) => void;\n   /** Function to check if the step is the first */\n   isFirst: () => boolean;\n   /** Function to check if the step is the last */\n   isLast: () => boolean;\n   /** Function to check if the step has any previous step*/\n   hasPrev: () => boolean;\n   /** Function to check if the step has any next step*/\n   hasNext: () => boolean;\n   /** Array of all available steps' title and order number*/\n   stepList: StepEntry[];\n   /** Combined state value of all steps */\n   state: State;\n   /** Function to set/update state by key */\n   setState: <T>(key: string, setValue: React.SetStateAction<T>, initialValue: T) => void;\n   /** Function to retrieve a state value by key */\n   getState: <T>(key: string, defaultValue: T) => T;\n };\n \n /**\n  * Por último, se incluye un contexto \"de paso\", que esencialmente se limita\n  * a proporcionar información relativa al orden del paso en la secuencia de pasos.\n  * Esto se pasa como contexto por no ensuciar innecesariamente los props de un \n  * elemento concreto (ver más adelante cómo se usa en Steps)\n  */\n interface StepContext {\n   order: number;\n }\n \n export interface NavigationComponentProps extends StepsContext {\n   [name: string]: unknown;\n }\n \n /**\n  * Creación del contexto y determinación del valor por defecto del mismo.\n  */\n const StepContext = createContext<StepContext>({ order: 0 });\n \n /**\n  * Wrapper component for each individual step.\n  */\n function Step<T extends StepComponentProps>(props: StepProps<T>) {\n \n   // obtención de la posición en la lista a partir del contexto\n   // OJO: Aquí se asume que este contexto existirá por estar el paso\n   // incluído dentro de algún `Steps`.\n   const { order }: StepContext = useContext(StepContext);\n   // obtención de los elementos garantizados en los props\n   const { title, component, onStepLoaded } = props;\n   // obtención del resto del contexto general\n   const stepsContextValue: StepsContext = useContext(StepsContext);\n \n   // desde el cual se extrae la cuenta para calcular los parámetros de navegación.\n   const { stepCount, currentStep } = stepsContextValue;\n \n   // comprobaciones que serán inyectadas como props en el componente de paso\n   // y que le servirán para saber su posición en la lista y si tiene más elementos\n   // antes o después.\n   const isFirst: () => boolean = () => order === 0;\n   const isLast: () => boolean = () => order === stepCount;\n   const hasNext: () => boolean = () => order + 1 < stepCount;\n   const hasPrev: () => boolean = () => order > 0;\n \n   // si acabamos de cargar este paso, y hemos especificado una acción a realizar en\n   // dicho momento, la ejecutamos.\n   useEffect(() => {\n     return () => {\n       if (currentStep === order && onStepLoaded) onStepLoaded();\n     };\n   }, [currentStep, order, onStepLoaded]);\n \n   // SÓLO se renderizan aquellos pasos cuyo orden coincida con el paso\n   // actual del contexto general.\n   if (order === currentStep) {\n     const exclusiveProps: ExclusiveStepProps<T> = { ...props };\n \n     const defaultTitle = \"Step \" + order;\n \n     // Forzamos el tipo para calmar al type checker. De esta forma le aseguramos que\n     // nunca vamos a tener un componente que tenga más parámetros que los básicos\n     // más posiblemente un listado de campos exclusivos.\n     const Component = component as unknown as ComponentType<StepComponentProps & ExclusiveStepProps<T>>;\n \n     return (\n       <Component\n         {...exclusiveProps}\n         {...stepsContextValue}\n         title={title || defaultTitle}\n         order={order}\n         hasPrev={hasPrev}\n         hasNext={hasNext}\n         isFirst={isFirst}\n         isLast={isLast}\n       />\n     );\n   }\n   return null;\n }\n \n //--------------------------------------------------------------\n //             Definición del Gestor de Pasos\n //--------------------------------------------------------------\n \n /**\n  * Una vez disponemos de las definiciones de un paso concreto, podemos \n  * pasar a definir el gestor general que mantendrá el estado global de \n  * los pasos y ejecutará la lógica de carga y descarga de cada uno de ellos.\n  */\n \n /**\n  * En vez de un estado que sólo permita como valores los tipos clásicos de formularios\n  * (strings, números y booleanos), vamos a utilizar el tipo unknown aquí como forma de \n  * tener estados más generales. El tipo `unknown` es la forma explícita de decirle a TS\n  * que el valor correspondiente podría ser cualquier cosa (como `any`), pero a diferencia\n  * de este último, `unkown` exige un casting explícito a un tipo conocido antes de poder \n  * usarse (lo cual tiende a ser mucho más seguro que llamar a métodos o propiedades de un\n  * objeto sobre el que no tenemos nada garantizado, como suele ser el caso con `any`).\n  */\n /**\n  * Definition of a (general) state to be handled by our context.\n  * Values are always of type unknown to ensure that we can store anything within a dictionary entry.\n  */\n export type State = {\n   [key: string]: unknown;\n };\n \n /**\n  * A partir de aquí interesará definir un contexto general que sea accesible \n  * a cualquier componente de tipo Step, mediante el que estos puedan consultar\n  * los distintos datos del formulario, o desencadenar acciones de consulta/ modificación\n  * del estado/ navegación entre pasos. Observamos que una buena parte de las propiedades\n  * de esta interfaz están presentes en los pasos individuales, y de hecho estos campos serán\n  * utilizados para añadir información general a cada uno de los componentes `<Step>`.\n  */\n \n interface StepsContext {\n   /** Number of steps available under this context */\n   stepCount: number;\n   /** Position of the currently active step (the one that will be rendered) */\n   currentStep: number;\n   /** List of all steps currently included within this context */\n   stepList: StepEntry[];\n   /** General state to be worked on throughout the different steps in the context */\n   state: State;\n   /** Function to set/update state by key */\n   setState: <T>(key: string, setValue: React.SetStateAction<T>, initialValue: T) => void;\n   /** Function to retrieve a state value by key */\n   getState: <T>(key: string, deafultValue: T) => T;\n   /** Callback describing how to move on to the next step in the sequence */\n   next: () => void;\n   /** Callback describing how to move back to the previous step in the sequence */\n   prev: () => void;\n   /** Callback describing how to jump to the given step in the sequence */\n   jump: (step: number) => void;\n }\n \n /**\n  * Con esto es posible crear un contexto (con un valor por defecto\n  * para que el comprobador de tipos de TS no lance errores) que podrá\n  * ser empleado desde cualquiera de los pasos para acceder a la información \n  * del estado de nuestro gestor. Como nota, lo que definimos aquí es el contexto\n  * como entidad más o menos abstracta, luego podremos instanciar tantos proveedores\n  * de este contexto como deseemos, cada uno con un estado propio particular.\n  */\n const StepsContext = createContext<StepsContext>({\n   // Dummy values for satisfying the type checker\n   // Gets updated before being passed down\n   stepCount: 0,\n   currentStep: 0,\n   stepList: [],\n   state: {},\n   setState: (_, __) => { },\n   getState: (_, __) => __,\n   next: () => { },\n   prev: () => { },\n   jump: (_) => { },\n });\n \n /**\n  * Al definir los props del gestor de pasos, podemos imponer un tipo determinado \n  * para los hijos de este componente mediante el uso de ReactElement<T>. Esencialmente,\n  * esto nos permitirá lanzar errores en compilación si alguien trata de añadir un hijo \n  * a un componente `<Steps>` que no reciba como props, al menos, un tipo de datos que contenga\n  * todos los campos de `StepProps` (se podrían usar tipos más extensos). La unión aquí es necesaria\n  * porque React hace distinción entre un hijo suelto y un listado de hijos (un hijo suelto\n  * NO es un listado con un elemento).\n  * \n  * La configuración de los pasos permite especificar cómo queremos que se comporte el gestor,\n  * incluyendo además la posibilidad de incorporar componentes exclusivos de navegación, before y\n  * after (que van antes y después del cuerpo principal, respectivamente).\n  */\n export interface StepsProps {\n   children: ReactElement<StepProps<StepComponentProps>> | ReactElement<StepProps<StepComponentProps>>[];\n   config?: StepsConfig;\n   genState: State;\n   setGenState: React.Dispatch<React.SetStateAction<State>>;\n };\n \n /**\n  * Esta configuración incluye básicamente tres elementos fundamentales:\n  * + `before`: función que genera un componente de React a partir de unos props (componente funcional)\n  * de manera que dicho componente quedará colocado antes de renderizar el contenido del paso activo.\n  * \n  * + `after`: como before, pero se colocará después del contenido del paso activo.\n  * \n  * + `navigation`: contiene tanto un componente general de navegación (generalmente para listar los\n  * pasos y permitir saltar de uno a otro de forma explícita) como la ubicación relativa al contenido \n  * del paso donde deberá colocarse.\n  */\n export type StepsConfig = {\n   before?: (props: any) => JSX.Element;\n   after?: (props: any) => JSX.Element;\n   navigation?: {\n     component: (props: any) => JSX.Element;\n     location?: \"before\" | \"after\";\n   };\n };\n \n \n /**\n  * Con todo lo anterior, estamos en disposición de pasar a hablar del propio componente\n  * de gestión de pasos. Este toma como props la configuración descrita anteriormente y una \n  * serie de hijos con tipos restringidos a componentes con props que sabe entender.\n  */\n /**\n  * Wrapper component for `Step` components.\n  */\n function Steps({ children, config, genState, setGenState }: StepsProps) {\n   // referencia a cada uno de los hijos del componente en formato array\n   // esto servirá para poblar la lista de elementos que podrá ser consumida\n   // por los pasos individuales a partir del contexto general.\n   const childSteps = React.Children.toArray(children);\n \n   const NavigationComponent = (context: NavigationComponentProps) => {\n     if (config?.navigation?.component) {\n       const NavComponent = config?.navigation?.component;\n       return <NavComponent {...context} />;\n     }\n   };\n \n   const BeforeComponent = (context: NavigationComponentProps) => {\n     if (config?.before) {\n       const Before = config.before;\n       return <Before {...context} />;\n     }\n   };\n \n   const AfterComponent = (context: NavigationComponentProps) => {\n     if (config?.after) {\n       const After = config.after;\n       return <After {...context} />;\n     }\n   };\n \n   /**\n    * Generar las entradas \"cosméticas\" de las que hablábamos antes para proporcionar\n    * información adicional a los pasos a partir de los hijos del componente.\n    */\n   const stepList: StepEntry[] = childSteps.map((child, order) => {\n     return {\n       name:\n         (child as { props: StepProps<StepComponentProps> }).props.title || \"Step \" + (order + 1),\n       order: order,\n     };\n   });\n \n   //----------------------------------------------\n   //       Creación del Contexto Global\n   //----------------------------------------------\n   // número de pasos.\n   const stepCount = childSteps.length;\n \n   // paso actual (renderizándose en este momento)\n   const _currentStep = useState<number>(0);\n   const currentStep = _currentStep[0];\n   const setCurrentStep = _currentStep[1];\n \n   // gestionar el avance al siguiente paso\n   const next: () => void = () => {\n     if (currentStep + 1 < stepCount) {\n       setCurrentStep(currentStep + 1);\n     }\n   };\n \n   // gestionar el retroceso al paso previo\n   const prev: () => void = () => {\n     if (currentStep > 0) {\n       setCurrentStep(currentStep - 1);\n     }\n   };\n \n   // gestionar un salto a un paso concreto\n   const jump: (step: number) => void = (step) => {\n     if (step >= 0 && step < stepCount) {\n       setCurrentStep(step);\n     }\n   };\n \n   // obtener un campo del estado por clave\n   function getState<T>(key: string, defaultValue: T): T {\n     if (key in genState) {\n       return genState[key] as T;\n     }\n     return defaultValue;\n   };\n \n   // sobrescribir un campo del estado por clave\n   function setState<T>(key: string, setValue: React.SetStateAction<T>, initialValue: T): void {\n     if (typeof setValue === \"function\" && setValue.length === 1) {\n       /**\n        * Este tipo de asignación resulta fundamental para evitar conflictos a la hora de modificar el estado.\n        * Cuando se hacen múltiples setState sobre una propiedad mantenida por medio de un useState (y en nuestro\n        * caso esto va a estar ocurriendo a menudo, puesto que modificar dos o más propiedades en un mismo render\n        * va a llevar a que se modifique el mismo estado general varias veces), SÓLO se mantiene el último cambio,\n        * lo cual quiere decir que si modificamos los campos A y B, sólo se mantendrá el valor al asignar el campo B,\n        * quedando la asignación a A ignorada. Para evitar esto, se puede utilizar el patrón de actualización sobre\n        * el valor previo (prev => ...) que SÍ que se combina con sucesivas asignaciones (se encadena).\n        */\n       setGenState(prevState => {\n         // setValue es un método ((prevState: S) => S)\n         const newState = Object.assign({}, prevState);\n         if (newState[key]) {\n           newState[key] = (setValue as (((prevState: T) => T)))(newState[key] as T);\n         }\n         else {\n           newState[key] = (setValue as (((prevState: T) => T)))(initialValue);\n         }\n         return newState;\n       });\n     }\n     else {\n       const pureValue = setValue as T;\n       setGenState(prevState => {\n         // setValue es un valor sin más => asignación directa\n         const newState = Object.assign({}, prevState);\n         newState[key] = pureValue;\n         return newState;\n       });\n     }\n   };\n \n   const context = {\n     stepCount,\n     currentStep,\n     stepList,\n     state: genState,\n     setState,\n     getState,\n     next,\n     prev,\n     jump,\n   };\n\n\n   const downloadFile = ( data:string, fileName:string, fileType:string ) => {\n    // Create a blob with the data we want to download as a file\n    const blob = new Blob([data], { type: fileType })\n    // Create an anchor element and dispatch a click event on it\n    // to trigger a download\n    const a = document.createElement('a')\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    const clickEvt = new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    })\n    a.dispatchEvent(clickEvt)\n    a.remove()\n}\n\n\n   //Para exportar los datos a un JSON lo que hago es preparar un array, y en este array voy a meter las cosas que me vayan dando los eventos\nconst exportToJson = () => {\n  // //Una vez que tengo los datos de cada evento, preparo un JSON y lo descargo\n  var datos= [];\n  let f = getState<any>('DATA', []); \n  console.log(genState);\n\n  for(let i = 0; i < f.length;i++){\n      datos.push(f[i]);\n  }\n  var jsonFinal = {Gencana: \"Nombre\", fases: datos}\n  downloadFile(JSON.stringify(jsonFinal, null, 2),'answers.json','text/json')\n}\n\n\n//Este método tiene como objetivo gestionar la escena a la que se quiere ir por medio del selector\n//Lo que hace es mirar que se acaba de seleccionar y dependiendo de lo escogido nos vamos a una escena \n//u otra\nconst UpdateSelector = (evt: React.FormEvent<HTMLSelectElement>):void => {\n  evt.preventDefault()\n  let s:string = evt.currentTarget.value;\n  let destiny=0;\n  if(s === \"QR\"){destiny=0;}\n  else if(s === \"Quiz\") {destiny=1;}\n  else if(s === \"Default\") {return;}\n  jump(destiny);\n};\n\n\n//MEtodo que aumenta en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n//En caso de que no este en el rango adecuado lo clampeamos \nconst AumentarPosSiguienteFase = ():void =>{\n  let value = getState<number>('WhereToPush',0)+1;\n  let current_state = getState<any>('DATA', []); \n  if(value >current_state.length)value = current_state.length;\n  setState<number>('WhereToPush',value,0);\n  console.log(value);\n}\n\n//MEtodo que disminuye en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n//En caso de que no este en el rango adecuado lo dejamos como minimo en 1 \nconst DisminuirPosSiguienteFase = ():void =>{\n  let value = getState<number>('WhereToPush',0)-1;\n  if(value <0)value = 0;\n  setState<number>('WhereToPush',value,0);\n  console.log(value);\n}\n\n\n//MEtodo que aumenta en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n//En caso de que no este en el rango adecuado lo clampeamos \nconst AumentarPosSiguienteFaseConfigurable = ():void =>{\n  let value = getState<number>('FaseConfigurable',0)+1;\n  let current_state = getState<any>('DATA', []); \n  if(current_state.length === 0) value = 0;\n  else if(value >=current_state.length)value = current_state.length-1;\n  setState<number>('FaseConfigurable',value,0);\n  console.log(value);\n}\n\n//MEtodo que disminuye en 1 la siguiente posicion en la que vamos a añadir una nueva fase a la aventur\n//En caso de que no este en el rango adecuado lo dejamos como minimo en 1 \nconst DisminuirPosSiguienteFaseConfigurable = ():void =>{\n  let value = getState<number>('FaseConfigurable',0)-1;\n  if(value <0)value = 0;\n  setState<number>('FaseConfigurable',value,0);\n  console.log(value);\n}\n\n//este método tiene como objetivo mirar qué fase es la que estamos seleccionando dentro de las que ya tenemos creadas\n// e ir a la escena que representa esa fase para poder reconfigurarla \nconst ConfigurarFase =():void =>{\n  //Pregunto por cual es la fase que estamos seleccionando y me quedo con las fases disponibles\n  let value = getState<number>('FaseConfigurable',1);\n  let new_state = getState<any>('DATA', [{}]); \n  if(new_state.length <2) {\n    alert(\"No ha ninguna fase que configurar\");\n    return;\n  }\n\n  //Indico que vamos a empezar a sobreescribir \n  setState<boolean>('SobreEscribir',true,true);\n\n  //miro a qué escena me tengo que ir para reconfigurar la fase que estoy intentando seleccionar\n  let escena = 0;\n  if(new_state[value].tipo === \"QRStage\")           escena = 0;\n  else if(new_state[value].tipo === \"QuizStage\")    escena = 1;\n\n  jump(escena);\n}\n\n///////////////////////////este código es una prueba para la furuta carga de JSONS por parte del jugador a la web, no va aun//////////////////////////////\n\nconst handleChange = (e:any):void => {\n  //Si de casualidad ha habido un error y es null lo que he obtenido no se hace nada\n  if(e === null)\n    return;\n\n  const fileReader = new FileReader();\n  fileReader.readAsText(e.target.files[0], \"UTF-8\");\n\n  let array = [];\n  fileReader.onload = e => {\n    {/* @ts-ignore */}\n    console.log(\"e.target.result\", e.target.result);\n    {/* @ts-ignore */}\n    console.log( \"El string es \"+(e.target.result as string));\n    \n    \n    {/* @ts-ignore */}\n    let obj = JSON.parse(e.target.result as string);\n\n    {/* @ts-ignore */}\n    // console.log( \"El nombre de la gencana es \"+ obj.fases);\n\n    let nuevasFases = [];\n    //console.log(\"EL JSON es \" + obj);\n    for(let i = 0 ; i < obj.fases.length; i++){\n      nuevasFases.push(obj.fases[i]);\n    }\n\n    setState('DATA',nuevasFases, []);\n    console.log(\"El estado actual es \"+ getState<any>('DATA', []));\n\n  };\n};\n////////////////////////////////////////////////////////////\n \n   return (\n    <div className='Coso'>\n\n\n {/* @ts-ignore */}\n    <input type= 'file' id= 'file' className= 'input-file' accept= '.json' onChange={handleChange} ></input>\n\n\n        {/* Este es el selector con el que nos podemos mover entre escenas */}\n        <h4>Selector de fases</h4>\n        <select id=\"Selector\" className=\"form-select\" onChange={ UpdateSelector}  >\n            <option value=\"Default\">Default</option>\n            <option value=\"QR\">QR</option>\n            <option value=\"Quiz\">Quiz</option>\n        </select>\n\n\n      {/* Esta es la seccion que permite configurar la posicion de la siguiente fase que vayamos a incluir */}\n      <h4>Posicion a insertar la siguiente fase de la aventura</h4>\n      <div className='rows'>\n        <button className='row' data-testid='<' onClick={DisminuirPosSiguienteFase}> - </button>\n        <p className='row'>{getState('WhereToPush',0)+1}º </p>\n        <button className='row' data-testid='>' onClick={AumentarPosSiguienteFase}> + </button>\n        <p className='row'>de los {getState<any>('DATA', []).length} actuales</p>\n      </div>\n\n\n      {/* Esta es la seccion que permite reconfigurar alguna fase ya existente */}\n      <h4>Fase que se quiere reconfigurar</h4>\n      <div className='rows'>\n        <button className='row' data-testid='<' onClick={DisminuirPosSiguienteFaseConfigurable}> - </button>\n        <p className='row'>{getState('FaseConfigurable',0)+1}º </p>\n        <button className='row' data-testid='>' onClick={AumentarPosSiguienteFaseConfigurable}> + </button>\n        <p className='row'>de los {getState<any>('DATA', []).length} actuales</p>\n        <button className='row' data-testid='>' onClick={ConfigurarFase}> Configurar Fase </button>\n\n      </div>\n\n\n      {/* Estos son los hijos que representan las diferentes \"escenas\" por las que podemos pasar y configurar la  aventura */}\n     <StepsContext.Provider value={context}>\n       {config?.before && BeforeComponent(context)}\n       {config?.navigation?.location === \"before\" &&\n         NavigationComponent(context)}\n       {React.Children.map(children, (child, order) => (\n         <StepContext.Provider value={{ order: order }}>\n           {child}\n         </StepContext.Provider>\n       ))}\n       {config?.navigation?.location === \"after\" && NavigationComponent(context)}\n       {config?.after && AfterComponent(context)}\n     </StepsContext.Provider>\n\n\n      {/* Este es el boton con el que se puede pedir que se descargue el JSON que engloba la aventura */}\n     <form onSubmit= {exportToJson}>\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Creame un JSON hijo mio</button>\n            </form>\n     </div>\n\n   );\n }\n \n export { Steps, Step };"]},"metadata":{},"sourceType":"module"}