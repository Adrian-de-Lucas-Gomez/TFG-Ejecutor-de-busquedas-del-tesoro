{"ast":null,"code":"var _jsxFileName = \"C:\\\\Universidad\\\\4Universidad\\\\TFG\\\\ejemploReact\\\\src\\\\components\\\\formOne\\\\steps\\\\Qr.tsx\",\n    _s = $RefreshSig$();\n\n//import QRCode from \"qrcode.react\";\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QR = props => {\n  _s();\n\n  //Referencia en el DOM al div que contiene el QR que renderizamos\n  const qrRef = useRef(null); //Donde guardamos el texto a codificar en QR\n\n  const [text, setText] = useState(\"\"); //Metodo que se encarga de convertir el qr a formato png y descargarlo\n\n  const downloadQRCode = evt => {\n    //No refrescamos la pagina\n    evt.preventDefault(); //@ts-ignore (Esto es pa que no salte un error de typescript, sin esto no compila (porque asimila que es null))\n    //Cogemos el primer elemento canvas que cuelga del div al que esta asociado la referencia\n    // (qrcode.react esta representado como un <canvas></canvas>, si estuviese representado\n    //con otra etiqueta habria que poner esa)\n\n    let canvas = qrRef.current.querySelector(\"canvas\"); //devuelve un data URI el cual contiene una representaci√≥n de una imagen en png\n\n    let image = canvas.toDataURL(\"image/png\"); //Creamos un componente <a> html al que vamos a asignar la informacion\n    //del QR qur vamos a descargar\n\n    let anchor = document.createElement(\"a\"); //le asignamos como referencia el qr ya convertido en imagen\n\n    anchor.href = image; //Le ponemos el nombre con el que la vamos a descargar\n\n    anchor.download = text + `.png`; //Metemos el componente <a> en el cuerpo de nuestro html de react\n\n    document.body.appendChild(anchor); //Clicamos sobre el para descargarlo\n\n    anchor.click(); //Quitamos el componente <a> puesto que ya ha cumplido su funcion\n\n    document.body.removeChild(anchor);\n  }; //Funcion que genra algo de tipo JSON que va a pedir la App cuando vaya a generar un JSON con la aventura\n\n\n  function DataForJSON() {\n    return {\n      QRCode: text\n    };\n  }\n\n  const guardaFase = e => {\n    //Para que no se refresque la pagina en el onSubmit\n    e.prevent;\n\n    if (text !== \"\") {\n      console.log(\"Llamada a guardar fase\"); //ME hago con el estado actual del array de info de la aventura\n\n      let new_state = props.getState('DATA', [{}]);\n      let myData = {\n        QRText: text\n      };\n      console.log(new_state);\n      new_state.push(myData);\n      props.setState('DATA', new_state, [{}]);\n    } else {\n      console.log(\"Rellena bien\");\n    }\n  };\n\n  const A = e => {\n    //Para que no se refresque la pagina en el onSubmit\n    e.preventDefault();\n\n    if (question !== \"\" && answers.length >= 2 && answers.length <= 6) {\n      console.log(\"Llamada a guardar fase\"); //ME hago con el estado actual del array de info de la aventura\n\n      let new_state = props.getState('DATA', [{}]);\n      let myData = {\n        Pregunta: question,\n        Respuestas: answers\n      };\n      let prueba = [{}];\n      prueba.push(myData);\n      prueba.push(myData);\n      console.log(prueba);\n      console.log(new_state);\n      myData.Respuestas = answers;\n      new_state.push(myData);\n      props.setState('DATA', new_state, [{}]);\n    } else {\n      console.log(\"Rellena bien\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"A\\xF1ada aqui el link al que reedirige el  QR:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: qrRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: guardaFase,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Guardar Fase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: downloadQRCode,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Descargar QR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QR, \"PmcO8Tbyn8RK/ComXK1zUl/Urq4=\");\n\n_c = QR;\nexport default QR;\n\nvar _c;\n\n$RefreshReg$(_c, \"QR\");","map":{"version":3,"sources":["C:/Universidad/4Universidad/TFG/ejemploReact/src/components/formOne/steps/Qr.tsx"],"names":["useState","useRef","QR","props","qrRef","text","setText","downloadQRCode","evt","preventDefault","canvas","current","querySelector","image","toDataURL","anchor","document","createElement","href","download","body","appendChild","click","removeChild","DataForJSON","QRCode","guardaFase","e","prevent","console","log","new_state","getState","myData","QRText","push","setState","A","question","answers","length","Pregunta","Respuestas","prueba","target","value"],"mappings":"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","sourcesContent":["//import QRCode from \"qrcode.react\";\r\nimport {useState, useRef, useEffect, forwardRef, useImperativeHandle} from \"react\"\r\nimport { StepComponentProps } from '../../Steps';\r\n\r\n\r\nconst QR = (props: StepComponentProps): JSX.Element => {\r\n  \r\n    //Referencia en el DOM al div que contiene el QR que renderizamos\r\n    const qrRef = useRef(null);\r\n    //Donde guardamos el texto a codificar en QR\r\n    const [text, setText] = useState<string>(\"\");\r\n\r\n\r\n    //Metodo que se encarga de convertir el qr a formato png y descargarlo\r\n    const downloadQRCode = (evt: React.FormEvent) => {\r\n        //No refrescamos la pagina\r\n        evt.preventDefault();\r\n        //@ts-ignore (Esto es pa que no salte un error de typescript, sin esto no compila (porque asimila que es null))\r\n        //Cogemos el primer elemento canvas que cuelga del div al que esta asociado la referencia\r\n        // (qrcode.react esta representado como un <canvas></canvas>, si estuviese representado\r\n        //con otra etiqueta habria que poner esa)\r\n        let canvas = qrRef.current.querySelector(\"canvas\");\r\n        \r\n        //devuelve un data URI el cual contiene una representaci√≥n de una imagen en png\r\n        let image:string = canvas.toDataURL(\"image/png\");\r\n        \r\n        //Creamos un componente <a> html al que vamos a asignar la informacion\r\n        //del QR qur vamos a descargar\r\n        let anchor:HTMLAnchorElement = document.createElement(\"a\");\r\n        //le asignamos como referencia el qr ya convertido en imagen\r\n        anchor.href = image;\r\n        //Le ponemos el nombre con el que la vamos a descargar\r\n        anchor.download = text +`.png`;\r\n        //Metemos el componente <a> en el cuerpo de nuestro html de react\r\n        document.body.appendChild(anchor);\r\n        //Clicamos sobre el para descargarlo\r\n        anchor.click();\r\n        //Quitamos el componente <a> puesto que ya ha cumplido su funcion\r\n        document.body.removeChild(anchor);\r\n      };\r\n\r\n    //Funcion que genra algo de tipo JSON que va a pedir la App cuando vaya a generar un JSON con la aventura\r\n    function DataForJSON(){\r\n        return {QRCode: text};\r\n    }\r\n\r\n\r\n    const guardaFase = (e:FormElement) => {\r\n        //Para que no se refresque la pagina en el onSubmit\r\n        e.prevent\r\n\r\n        if (text !== \"\"){\r\n            console.log(\"Llamada a guardar fase\")\r\n            //ME hago con el estado actual del array de info de la aventura\r\n            let new_state = props.getState<[{}]>('DATA', [{}]); \r\n            let myData = {QRText: text};\r\n            console.log(new_state);\r\n            new_state.push(myData);\r\n            props.setState('DATA',new_state,[{}]);\r\n        }\r\n        else{\r\n            console.log(\"Rellena bien\")\r\n        }\r\n    }\r\n    const A = (e:FormElement) => {\r\n        //Para que no se refresque la pagina en el onSubmit\r\n        e.preventDefault()\r\n        if (question !== \"\" && answers.length >= 2 && answers.length <= 6){\r\n            console.log(\"Llamada a guardar fase\")\r\n\r\n            //ME hago con el estado actual del array de info de la aventura\r\n            let new_state = props.getState<[{}]>('DATA', [{}]); \r\n\r\n\r\n\r\n            let myData = {Pregunta: question, Respuestas: answers};\r\n            let prueba = [{}];\r\n            prueba.push(myData);\r\n            prueba.push(myData);\r\n            console.log(prueba);\r\n            console.log(new_state);\r\n            myData.Respuestas = answers;\r\n            new_state.push(myData);\r\n            props.setState('DATA',new_state,[{}]);\r\n        }\r\n        else{\r\n            console.log(\"Rellena bien\")\r\n        }\r\n    }\r\n \r\n    return (\r\n    <div >\r\n        <h3>A√±ada aqui el link al que reedirige el  QR:</h3>\r\n        <form onSubmit={e => e.preventDefault()}>\r\n            <input className=\"form-control\" type=\"text\" required value={text} onChange ={ e =>setText(e.target.value)}></input>\r\n        </form>\r\n        <div ref={qrRef}>\r\n            {/* <QRCode value={text} size={400} fgColor=\"black\" bgColor=\"white\" level=\"H\"  /> */}\r\n        </div>\r\n        <form onSubmit= {guardaFase}>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Guardar Fase</button>\r\n            </form>\r\n        <form onSubmit= {downloadQRCode}>\r\n            <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Descargar QR</button>\r\n        </form>\r\n    </div>\r\n    )\r\n};\r\nexport default QR;"]},"metadata":{},"sourceType":"module"}