{"ast":null,"code":"var _jsxFileName = \"C:\\\\Universidad\\\\4Universidad\\\\TFG\\\\TFG-Ejecutor-de-busquedas-del-tesoro\\\\ReactDesdeEjemplo\\\\src\\\\components\\\\formOne\\\\steps\\\\Quiz.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  //Esto es como un using en c++\n  //Donde almacenamos la pregunta\n  const [question, setQuestion] = useState(\"\"); //Array con las posibles respuestas a esa pregunta\n\n  const [answers, setAnswers] = useState([]); //Respuesta en proceso\n\n  const [currAnswer, setCurrAnswer] = useState(\"\"); //const [quizAddFunction, setFuncion] = useState<Function>(props.funcion);\n\n  const [index, setIndex] = useState(props.order); //Nada mas montarme le pregunto al contenedor si ya existe el array en el que se van a almacenar todos los datos\n  //si NO existe lo creamos\n\n  useEffect(() => {\n    //Le digo que me de el valor de DATA y un valor por defecto en caso de NO encontrarlo, si obtengo el valor por defecto \n    //le asigno el un valor inicial\n    if (props.getState('DATA', \"\") === \"\") {}\n  }, []);\n\n  const modifyQuestion = e => {\n    setQuestion(e); // props.setState<string>('firstname', \"Hola\", '')\n    // //ME hago con el estado actual del array de info de la aventura\n    // let new_state = props.getState<string>('DATA', '{nombre: \"hola\"}'); \n    // var casteado = {nombre:\"Hola a todos\", fases:[{}] };\n    // casteado.fases[props.order] = {pregunta:\"Hola a todos\"};\n    // var vueltaAString = JSON.stringify(casteado); \n    // console.log(vueltaAString);\n    // props.setState<string>('DATA',vueltaAString,\"\");\n  };\n\n  const handleNewQuestion = e => {\n    e.preventDefault();\n    addAnswer(currAnswer);\n    setCurrAnswer(\"\");\n  };\n\n  const DataParaJSON = () => {\n    var myData = {\n      Pregunta: question,\n      Respuestas: answers,\n      indi: index\n    };\n    myData.Respuestas = answers;\n    return myData;\n  };\n\n  const addAnswer = text => {\n    console.log(\"Respuesta aÃ±adida\");\n    setAnswers([...answers, {\n      text,\n      isCorrect: false\n    }]);\n  };\n\n  const removeAnswer = index => {\n    const newAnswers = [...answers];\n    newAnswers.splice(index, 1);\n    setAnswers(newAnswers);\n  };\n\n  const setAnswerAsCorrect = index => {\n    const newAnswers = [...answers];\n    newAnswers[index].isCorrect = !newAnswers[index].isCorrect;\n    setAnswers(newAnswers);\n  }; //Metodo utilizado para guardar los datos que actuales del\n  //quiz en el registro de fases actual de la aventura\n\n\n  const guardaFase = e => {\n    //Para que no se refresque la pagina en el onSubmit\n    e.preventDefault();\n\n    if (question !== \"\" && answers.length >= 2 && answers.length <= 6) {\n      //ME hago con el estado actual del array de info de la aventura\n      let new_state = props.getState('DATA', [{}]); //Preparo el diccionario que voy a meter en el registro\n\n      let myData = {\n        tipo: \"QuizStage\",\n        Pregunta: question,\n        Respuestas: answers\n      }; //Lo almaceno en la lista de fases que tengo disponibles\n\n      new_state.push(myData); //new_state.splice(0,0,myData);\n\n      console.log(new_state); //Y tras modificar la copia del registro para que me contenga pongo esta copia como el registro de la aventura\n\n      props.setState('DATA', new_state, [{}]);\n    } else {\n      console.log(\"Rellena bien\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Configuracion de evento de quiz:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"A\\xF1ada aqui la pregunta del cuestionario\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: question,\n        onChange: e => modifyQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Pregunta actual: \", question]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleNewQuestion,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        required: true,\n        value: currAnswer,\n        onChange: e => setCurrAnswer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Add Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-md-left\",\n          style: {\n            textDecoration: answer.isCorrect ? \"underline\" : \" \"\n          },\n          children: answer.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-primary mt-2\",\n          onClick: () => setAnswerAsCorrect(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !answer.isCorrect ? \"Correcta\" : \"Incorrecta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-danger mt-2\",\n          onClick: () => removeAnswer(index),\n          children: \"Borrar respuesta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 16\n        }, this)]\n      }, \"Respuesta: \" + index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: guardaFase,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary mt-2\",\n        type: \"submit\",\n        children: \"Guardar Fase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"EivJ4ldps+ZnZwfO1YvKQ8tjDww=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Universidad/4Universidad/TFG/TFG-Ejecutor-de-busquedas-del-tesoro/ReactDesdeEjemplo/src/components/formOne/steps/Quiz.tsx"],"names":["React","Fragment","useState","useEffect","Quiz","props","question","setQuestion","answers","setAnswers","currAnswer","setCurrAnswer","index","setIndex","order","getState","modifyQuestion","e","handleNewQuestion","preventDefault","addAnswer","DataParaJSON","myData","Pregunta","Respuestas","indi","text","console","log","isCorrect","removeAnswer","newAnswers","splice","setAnswerAsCorrect","guardaFase","length","new_state","tipo","push","setState","target","value","map","answer","textDecoration"],"mappings":"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","sourcesContent":["import { queries } from \"@testing-library/react\";\r\nimport { StepComponentProps } from '../../Steps';\r\nimport React, {Fragment, useState, useEffect  } from \"react\"\r\nimport { createSemicolonClassElement } from \"typescript\";\r\n\r\n  \r\n\r\nconst Quiz = (props: StepComponentProps): JSX.Element => {\r\n\r\n    interface Answer {\r\n        text: string;\r\n        isCorrect: boolean;\r\n    }\r\n\r\n    //Esto es como un using en c++\r\n    type FormElement = React.FormEvent<HTMLFormElement>;\r\n\r\n    //Donde almacenamos la pregunta\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    //Array con las posibles respuestas a esa pregunta\r\n    const [answers, setAnswers] = useState<Answer[]>([]);\r\n    //Respuesta en proceso\r\n    const [currAnswer, setCurrAnswer] = useState<string>(\"\");\r\n\r\n    \r\n    \r\n    //const [quizAddFunction, setFuncion] = useState<Function>(props.funcion);\r\n    const [index, setIndex] = useState(props.order);\r\n    \r\n\r\n    //Nada mas montarme le pregunto al contenedor si ya existe el array en el que se van a almacenar todos los datos\r\n    //si NO existe lo creamos\r\n    useEffect(() => {\r\n        //Le digo que me de el valor de DATA y un valor por defecto en caso de NO encontrarlo, si obtengo el valor por defecto \r\n        //le asigno el un valor inicial\r\n        if(props.getState<string>('DATA', \"\") === \"\"){}\r\n\r\n      }, []); \r\n\r\n        \r\n    const modifyQuestion = (e:string):void =>{\r\n        setQuestion(e);\r\n        // props.setState<string>('firstname', \"Hola\", '')\r\n\r\n        // //ME hago con el estado actual del array de info de la aventura\r\n        // let new_state = props.getState<string>('DATA', '{nombre: \"hola\"}'); \r\n        // var casteado = {nombre:\"Hola a todos\", fases:[{}] };\r\n        // casteado.fases[props.order] = {pregunta:\"Hola a todos\"};\r\n        // var vueltaAString = JSON.stringify(casteado); \r\n        // console.log(vueltaAString);\r\n        // props.setState<string>('DATA',vueltaAString,\"\");\r\n    }\r\n\r\n\r\n    const handleNewQuestion = (e:FormElement):void =>{\r\n        e.preventDefault();\r\n        addAnswer(currAnswer);\r\n        setCurrAnswer(\"\");\r\n    }\r\n\r\n\r\n    const DataParaJSON = (): {} => {\r\n        var myData = {Pregunta: question, Respuestas: answers, indi: index};\r\n        myData.Respuestas = answers;\r\n        return myData;\r\n    }\r\n\r\n    const addAnswer = (text:string):void =>{\r\n        console.log(\"Respuesta aÃ±adida\");\r\n        setAnswers([...answers, {text, isCorrect:false}]);\r\n    }\r\n\r\n    const removeAnswer = (index:number): void =>{\r\n        const newAnswers: Answer[] = [...answers];\r\n        newAnswers.splice(index, 1);\r\n        setAnswers(newAnswers);\r\n    }\r\n\r\n    const setAnswerAsCorrect = (index:number):void =>{\r\n        const newAnswers: Answer[] = [...answers];\r\n        newAnswers[index].isCorrect = !newAnswers[index].isCorrect;\r\n        setAnswers(newAnswers);\r\n\r\n    }\r\n\r\n\r\n    //Metodo utilizado para guardar los datos que actuales del\r\n    //quiz en el registro de fases actual de la aventura\r\n    const guardaFase = (e:FormElement) => {\r\n        //Para que no se refresque la pagina en el onSubmit\r\n        e.preventDefault()\r\n        if (question !== \"\" && answers.length >= 2 && answers.length <= 6){\r\n\r\n            //ME hago con el estado actual del array de info de la aventura\r\n            let new_state = props.getState<[{}]>('DATA', [{}]); \r\n            //Preparo el diccionario que voy a meter en el registro\r\n            let myData = {tipo:\"QuizStage\" ,Pregunta: question, Respuestas: answers};\r\n\r\n            //Lo almaceno en la lista de fases que tengo disponibles\r\n            new_state.push(myData);\r\n            //new_state.splice(0,0,myData);\r\n            console.log(new_state);\r\n            \r\n            //Y tras modificar la copia del registro para que me contenga pongo esta copia como el registro de la aventura\r\n            props.setState('DATA',new_state,[{}]);\r\n        }\r\n        else{\r\n            console.log(\"Rellena bien\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Configuracion de evento de quiz:</h2>\r\n            <form onSubmit={e => e.preventDefault() }>\r\n                <h3>AÃ±ada aqui la pregunta del cuestionario</h3>\r\n                <input className=\"form-control\" type=\"text\" required value={question} onChange ={ e =>modifyQuestion(e.target.value)}></input>\r\n            </form>\r\n\r\n            <h2>Pregunta actual: {question}</h2>\r\n\r\n            <form onSubmit={handleNewQuestion}>\r\n                <input className= \"form-control\" type=\"text\" required value={currAnswer} onChange={e =>setCurrAnswer(e.target.value)}></input>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Add Answer</button>\r\n            </form>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n\r\n            <section>\r\n            {answers.map((answer: Answer, index:number) => (\r\n            <Fragment key={\"Respuesta: \" + index}>\r\n               <div className=\"text-md-left\" style={{textDecoration: answer.isCorrect ? \"underline\" : \" \"}}>{answer.text}</div>\r\n               <button className=\"btn btn-outline-primary mt-2\" onClick = {():void => setAnswerAsCorrect(index)}>\r\n                   <div>{!answer.isCorrect ? \"Correcta\" : \"Incorrecta\"}</div>\r\n               </button>\r\n               <button className = \"btn btn-outline-danger mt-2\" onClick={():void => removeAnswer(index)}>Borrar respuesta</button>\r\n           </Fragment>\r\n            ))}\r\n            </section>\r\n\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <form onSubmit= {guardaFase}>\r\n                <button className=\"btn btn-outline-primary mt-2\" type=\"submit\">Guardar Fase</button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}